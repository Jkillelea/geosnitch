// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

#![allow(dead_code)]
use dbus as dbus;
use dbus::arg;
use dbus::tree;


pub trait OrgFreedesktopGeoClue2Manager {
    type Err;
    fn get_client(&self) -> Result<dbus::Path<'static>, Self::Err>;
    fn add_agent(&self, id: &str) -> Result<(), Self::Err>;
    fn get_in_use(&self) -> Result<bool, Self::Err>;
    fn get_available_accuracy_level(&self) -> Result<u32, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopGeoClue2Manager for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn get_client(&self) -> Result<dbus::Path<'static>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.GeoClue2.Manager".into(), &"GetClient".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let client: dbus::Path<'static> = try!(i.read());
        Ok(client)
    }

    fn add_agent(&self, id: &str) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.GeoClue2.Manager".into(), &"AddAgent".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(id);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_in_use(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.GeoClue2.Manager", "InUse")
    }

    fn get_available_accuracy_level(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.GeoClue2.Manager", "AvailableAccuracyLevel")
    }
}

pub fn org_freedesktop_geo_clue2_manager_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgFreedesktopGeoClue2Manager<Err=tree::MethodErr>,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.GeoClue2.Manager", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let client = try!(d.get_client());
        let rm = minfo.msg.method_return();
        let rm = rm.append1(client);
        Ok(vec!(rm))
    };
    let m = factory.method("GetClient", Default::default(), h);
    let m = m.out_arg(("client", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let id: &str = try!(i.read());
        let d = fclone(minfo);
        try!(d.add_agent(id));
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("AddAgent", Default::default(), h);
    let m = m.in_arg(("id", "s"));
    let i = i.add_m(m);

    let p = factory.property::<bool, _>("InUse", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_in_use()));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("AvailableAccuracyLevel", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_available_accuracy_level()));
        Ok(())
    });
    let i = i.add_p(p);
    i
}
