// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

#![allow(dead_code)]
use dbus as dbus;
use dbus::arg;
use dbus::tree;


pub trait OrgFreedesktopGeoClue2Client {
    type Err;
    fn start(&self) -> Result<(), Self::Err>;
    fn stop(&self) -> Result<(), Self::Err>;
    fn get_location(&self) -> Result<dbus::Path<'static>, Self::Err>;
    fn get_distance_threshold(&self) -> Result<u32, Self::Err>;
    fn set_distance_threshold(&self, value: u32) -> Result<(), Self::Err>;
    fn get_time_threshold(&self) -> Result<u32, Self::Err>;
    fn set_time_threshold(&self, value: u32) -> Result<(), Self::Err>;
    fn get_desktop_id(&self) -> Result<String, Self::Err>;
    fn set_desktop_id(&self, value: String) -> Result<(), Self::Err>;
    fn get_requested_accuracy_level(&self) -> Result<u32, Self::Err>;
    fn set_requested_accuracy_level(&self, value: u32) -> Result<(), Self::Err>;
    fn get_active(&self) -> Result<bool, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopGeoClue2Client for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn start(&self) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.GeoClue2.Client".into(), &"Start".into(), |_| {
        }));
        try!(m.as_result());
        Ok(())
    }

    fn stop(&self) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.GeoClue2.Client".into(), &"Stop".into(), |_| {
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_location(&self) -> Result<dbus::Path<'static>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.GeoClue2.Client", "Location")
    }

    fn get_distance_threshold(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.GeoClue2.Client", "DistanceThreshold")
    }

    fn get_time_threshold(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.GeoClue2.Client", "TimeThreshold")
    }

    fn get_desktop_id(&self) -> Result<String, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.GeoClue2.Client", "DesktopId")
    }

    fn get_requested_accuracy_level(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.GeoClue2.Client", "RequestedAccuracyLevel")
    }

    fn get_active(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.GeoClue2.Client", "Active")
    }

    fn set_distance_threshold(&self, value: u32) -> Result<(), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.freedesktop.GeoClue2.Client", "DistanceThreshold", value)
    }

    fn set_time_threshold(&self, value: u32) -> Result<(), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.freedesktop.GeoClue2.Client", "TimeThreshold", value)
    }

    fn set_desktop_id(&self, value: String) -> Result<(), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.freedesktop.GeoClue2.Client", "DesktopId", value)
    }

    fn set_requested_accuracy_level(&self, value: u32) -> Result<(), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.freedesktop.GeoClue2.Client", "RequestedAccuracyLevel", value)
    }
}

pub fn org_freedesktop_geo_clue2_client_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgFreedesktopGeoClue2Client<Err=tree::MethodErr>,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.GeoClue2.Client", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        try!(d.start());
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Start", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        try!(d.stop());
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Stop", Default::default(), h);
    let i = i.add_m(m);

    let p = factory.property::<dbus::Path, _>("Location", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_location()));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("DistanceThreshold", Default::default());
    let p = p.access(tree::Access::ReadWrite);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_distance_threshold()));
        Ok(())
    });
    let fclone = f.clone();
    let p = p.on_set(move |iter, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        try!(d.set_distance_threshold(try!(iter.read())));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("TimeThreshold", Default::default());
    let p = p.access(tree::Access::ReadWrite);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_time_threshold()));
        Ok(())
    });
    let fclone = f.clone();
    let p = p.on_set(move |iter, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        try!(d.set_time_threshold(try!(iter.read())));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("DesktopId", Default::default());
    let p = p.access(tree::Access::ReadWrite);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_desktop_id()));
        Ok(())
    });
    let fclone = f.clone();
    let p = p.on_set(move |iter, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        try!(d.set_desktop_id(try!(iter.read())));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<u32, _>("RequestedAccuracyLevel", Default::default());
    let p = p.access(tree::Access::ReadWrite);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_requested_accuracy_level()));
        Ok(())
    });
    let fclone = f.clone();
    let p = p.on_set(move |iter, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        try!(d.set_requested_accuracy_level(try!(iter.read())));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("Active", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_active()));
        Ok(())
    });
    let i = i.add_p(p);
    i
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopGeoClue2ClientLocationUpdated {
    pub old: dbus::Path<'static>,
    pub new: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgFreedesktopGeoClue2ClientLocationUpdated {
    const NAME: &'static str = "LocationUpdated";
    const INTERFACE: &'static str = "org.freedesktop.GeoClue2.Client";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.old as &arg::RefArg).append(i);
        (&self.new as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.old = try!(i.read());
        self.new = try!(i.read());
        Ok(())
    }
}
